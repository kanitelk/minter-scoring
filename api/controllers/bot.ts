import TelegramBot from 'node-telegram-bot-api';
import Agent from 'socks5-https-client/lib/Agent';

const BotUser = require('../models/BotUser');

const config = require('../config');
const { scoring } = require('../core/main');

const bot = new TelegramBot(config.botToken, {
  polling: true, request: {
    agentClass: Agent,
    agentOptions: {
      socksHost: config.socksHost,
      socksPort: config.socksPort,
      socksUsername: config.socksUsername,
      socksPassword: config.socksPassword
    }
  }
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  let user = await BotUser.findOne({ chatId: parseInt(chatId) });
  if (user === null) BotUser.create({ chatId: parseInt(chatId), req: 1 })
  else BotUser.findOneAndUpdate({ chatId: parseInt(chatId) }, { req: user.req + 1 })

  if (msg.text === '/start') {
    let text = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ü—Ä–∏—à–ª–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`
    bot.sendMessage(chatId, text);
    return
  }

  console.log(msg.text);
  if (msg.text.length === 42) {
    bot.sendMessage(chatId, '–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å...\n–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥... ‚òòÔ∏è');

    let send = await scoring(msg.text)
    if (send === null || typeof send === 'undefined') {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ');
    } else {

      const opts = {
        parse_mode: 'Markdown'
      };

      let age = new Date();
      age.setTime(send.age);

      let genesisString = '';
      if (send.genesis === true) genesisString = '–î–∞ ‚úî'
      else (genesisString = '–ù–µ—Ç')

      let levelString;
      if (send.score < 10) levelString = '–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π'
      if (send.score >= 10 && send.score < 27) levelString = '–ù–∏–∑–∫–∏–π'
      if (send.score >= 27 && send.score < 35) levelString = '–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ'
      if (send.score >= 35 && send.score < 45) levelString = '–°—Ä–µ–¥–Ω–∏–π'
      if (send.score >= 45 && send.score < 65) levelString = '–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ'
      if (send.score >= 65 && send.score < 100) levelString = '–í—ã—Å–æ–∫–∏–π'
      if (send.score === 100) levelString = '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π'

      let coins = '–ù–µ—Ç';
      if (send.coins.length > 0) {
        coins = send.coins.map((item) => item.symbol).join(', ')
      }

      let level = ('' + send.totalBip)[0];
      let smart_expert, smart_rating;
      if (send.smart_expert > 0) {
        smart_expert = `\nSMART(X) Expert (${send.smart_expert}) ‚úÖ`
      } else smart_expert = '';
      if (send.smart_rating > 0) {
        smart_rating = `\nSMART(X) Project Rating (${send.smart_rating}) ‚úÖ`
      } else smart_rating = '';

      send = `${send.icon} ${send.address.substr(0, 12) + '...' + send.address.slice(-8)} \n${send.iconName} ${level}-–≥–æ —É—Ä–æ–≤–Ω—è\n\nKARMA (–±–∞–ª–∞–Ω—Å): ${Math.round(send.balanceKarma * 100000) / 100000} ‚òòÔ∏è \nKARMA (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–æ): ${Math.round(send.delegatedKarma * 100000) / 100000} ‚òòÔ∏è \nKARMA (–ø–æ–ª—É—á–µ–Ω–æ): ${Math.round(send.receivedKarma * 100000) / 100000} ‚òòÔ∏è \n\n–í–æ–∑—Ä–∞—Å—Ç: ${Math.floor(+((new Date().getTime() - age.getTime()) / 86400000))} –¥–Ω–µ–π üìÖ \nGenesis (& KYC): ${genesisString} \n\n–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–æ: ${send.totalDelegatedBip.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ")} BIP \n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${send.transactions} \n\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: ${coins}\n–õ–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω–æ –º–æ–Ω–µ—Ç: ${send.coins.length - send.existCoins} \n\n–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: ${send.respectTx.length} üëç\n–ñ–∞–ª–æ–±—ã: ${send.scamTx.length}  üëé\n–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${send.verificationTx.length} ü§ù ${smart_expert} ${smart_rating} \n\n*–°–∫–æ—Ä–∏–Ω–≥: ${send.score}/100*\n*–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: ${levelString}* \n\nüîª –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\nhttps://scoring.minter.work/?address=${send.address}`

      bot.sendMessage(chatId, send, opts)
    }

  } else {
    bot.sendMessage(chatId, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ (Mx...)');
  }
});

module.exports = bot;